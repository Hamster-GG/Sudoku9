/**
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ sudoku-puzzles.txt.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –µ–≥–æ —Ä–µ—à–∏—Ç—å.
 * –î–æ–≥–æ–≤–æ—Ä–∏—Å—å —Å–æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */

function solve(boardString) {
  //—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–∞—Å—Å–∏–≤
  let boardArray = [];
  for (let i = 0; i < boardString.length; i += 9) {
    boardArray.push([...boardString.slice(i, i + 9)]);
  }
  // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –¥–≤—É–º—è —Ü–∏–∫–ª–∞–º–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö ‚Äò-‚Äô –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—á–µ–ª–∫—É
  for (let row = 0; row < boardArray.length; row += 1) {
    for (let col = 0; col < boardArray.length; col += 1) {
      if (boardArray[row][col] === "-") {
        boardArray[row][col] = "üêù";
      }
    }
  }
  return boardArray;
}

function isSolved(board) {}
function prettyBoard(board) {}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, readAndSolve.js).
module.exports = {
  solve,
  isSolved,
  prettyBoard,
};
